package ucmdb

import (
	"context"
	"encoding/json"
	"fmt"
	"sort"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/panderosa/terraform-provider-ucmdb/utils"
	"github.com/panderosa/ucmdb-sdk/rest"
)

func resourceDataModel() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceDataModelCreate,
		ReadContext:   resourceDataModelRead,
		UpdateContext: resourceDataModelUpdate,
		DeleteContext: resourceDataModelDelete,

		Schema: map[string]*schema.Schema{
			"cis": {
				Type:        schema.TypeSet,
				Description: "data in configuration item",
				Required:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ucmdbId": {
							Type:        schema.TypeString,
							Description: "the string that represents a temporary ID or UCMDB ID of the entity",
							Required:    true,
						},
						"type": {
							Type:         schema.TypeString,
							Description:  "CI type.",
							ValidateFunc: validation.StringIsNotEmpty,
							Required:     true,
						},
						"properties": {
							Type:        schema.TypeSet,
							Description: "CI map of properties.",
							Required:    true,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Required: true,
									},
									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
			"relations": {
				Type:        schema.TypeSet,
				Description: "data in relation",
				Required:    false,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"ucmdbId": {
							Type:        schema.TypeString,
							Description: "the string that represents a temporary ID or UCMDB ID of the entity",
							Required:    true,
						},
						"type": {
							Type:         schema.TypeString,
							Description:  "Reltion type.",
							ValidateFunc: validation.StringIsNotEmpty,
							Required:     true,
						},
						"end1Id": {
							Type:        schema.TypeString,
							Description: "the from site of the relationship",
							Required:    true,
						},
						"end2Id": {
							Type:        schema.TypeString,
							Description: "the to site of the relationship",
							Required:    true,
						},
						"properties": {
							Type:        schema.TypeSet,
							Description: "CI map of properties.",
							Optional:    true,
							MaxItems:    1,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:     schema.TypeString,
										Optional: true,
									},
									"description": {
										Type:     schema.TypeString,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
			"last_updated": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
		},

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceDataModelCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*rest.Client)

	cis := d.Get("cis").(*schema.Set)
	relations := d.Get("relations").(*schema.Set)

	cis_array := []rest.DataInConfigurationItem{}
	cis_list := cis.List()
	for _, ci := range cis_list {
		if item, ok := ci.(map[string]interface{}); ok {
			props := item["properties"].(*schema.Set)
			props_map := (props.List())[0].(map[string]interface{})
			dic := rest.DataInConfigurationItem{
				UcmdbId:    item["ucmdb_id"].(string),
				Type:       item["type"].(string),
				Properties: props_map,
			}
			cis_array = append(cis_array, dic)
		} else {
			return diag.FromErr(fmt.Errorf("resourceDataModelCreate() mapping item configuration failed"))
		}
	}

	rel_array := []rest.DataInRelation{}
	re_list := relations.List()
	for _, r := range re_list {
		if item, ok := r.(map[string]interface{}); ok {
			props := item["properties"].(*schema.Set)
			props_map := (props.List())[0].(map[string]interface{})
			dir := rest.DataInRelation{
				UcmdbId:    item["ucmdb_id"].(string),
				Type:       item["type"].(string),
				End1Id:     item["end1_id"].(string),
				End2Id:     item["end2_id"].(string),
				Properties: props_map,
			}
			rel_array = append(rel_array, dir)
		} else {
			return diag.FromErr(fmt.Errorf("resourceDataModelCreate() mapping relation configuration failed"))
		}
	}

	td := &rest.TopologyData{
		CIS:       cis_array,
		Relations: rel_array,
	}

	dmc, err := conn.Ucmdb.CreateDataModel(td)
	if err != nil {
		return diag.FromErr(err)
	}

	b, err := json.MarshalIndent(dmc, "", "  ")
	if err != nil {
		utils.LogMe("ERROR", "resourceDataModelCreate():marshalling DataModelChange struct failed", err)
		return diag.FromErr(err)
	}
	utils.LogMe("DEBUG", "resourceDataModelCreate()", string(b))
	id, err := hashDmcJson(b)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(*id)
	return resourceDataModelCiRead(ctx, d, meta)
}

func hashDmcJson(b []byte) (*string, error) {
	jmap := make(map[string][]string)
	err := json.Unmarshal(b, &jmap)
	if err != nil {
		return nil, err
	}

	keys := []string{}
	for k := range jmap {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(i, j int) bool {
		return keys[i] < keys[j]
	})

	js := ""
	for i := 0; i < len(keys); i++ {
		a := jmap[keys[i]]
		as := strings.Join(a, "")
		js += as
	}

	id := fmt.Sprintf("%d", schema.HashString(js))
	return &id, nil
}

func resourceDataModelRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*rest.Client)
	var diags diag.Diagnostics

	// get items and relations as list
	cis := (d.Get("cis").(*schema.Set)).List()
	rels := (d.Get("relations").(*schema.Set)).List()

	// prepare tql query structure
	nodes := []rest.Node{}
	relations := []rest.Relation{}
	tql := rest.TopologyQuery{
		Nodes:     nodes,
		Relations: relations,
	}

	for _, ci := range cis {
		if item, ok := ci.(map[string]interface{}); ok {
			props := (item["properties"].(*schema.Set)).List()
			props_map := props[0].(map[string]interface{})
			attrs := make([]string, 0, len(props_map))
			for a := range props_map {
				attrs = append(attrs, a)
			}
			// attribute conditions
			acs := []rest.AttributeConditions{
				{
					Attribute: "name",
					Operator:  "equal",
					Value:     props_map["name"].(string),
				},
			}

			node := rest.Node{
				Type:                item["type"].(string),
				QueryIdentifier:     item["ucmdb_id"].(string),
				Visible:             true,
				IncludeSubtypes:     false,
				Layout:              attrs,
				AttributeConditions: acs,
			}
			nodes = append(nodes, node)
		} else {
			return diag.FromErr(fmt.Errorf("resourceDataModelCreate() mapping item configuration failed"))
		}
	}

	for _, r := range rels {
		if item, ok := r.(map[string]interface{}); ok {
			props := (item["properties"].(*schema.Set)).List()
			props_map := props[0].(map[string]interface{})
			attrs := make([]string, 0, len(props_map))
			for a := range props_map {
				attrs = append(attrs, a)
			}

			relation := rest.Relation{
				Type:            item["type"].(string),
				QueryIdentifier: item["ucmdb_id"].(string),
				Visible:         true,
				IncludeSubtypes: false,
				Layout:          attrs,
				From:            item["end1_id"].(string),
				To:              item["end2_id"].(string),
			}
			relations = append(relations, relation)
		} else {
			return diag.FromErr(fmt.Errorf("resourceDataModelCreate() mapping item configuration failed"))
		}
	}

	td, err := conn.Ucmdb.ExecuteQuery(tql)
	if err != nil {
		return diag.FromErr(err)
	}

	d.Set("type", dci.Type)

	props := make(map[string]interface{})
	props["name"] = dci.Properties["name"].(string)
	props["description"] = dci.Properties["description"].(string)
	if err := d.Set("properties", []interface{}{props}); err != nil {
		return diag.FromErr(err)
	}
	return diags
}

func resourceDataModelUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*rest.Client)
	id := d.Id()

	if d.HasChanges("type", "properties") {

		ci_type := d.Get("type").(string)
		ci_prop_set := d.Get("properties").(*schema.Set)
		ci_props := (ci_prop_set.List())[0].(map[string]interface{})

		dic := rest.DataInConfigurationItem{
			UcmdbId:    id,
			Type:       ci_type,
			Properties: ci_props,
		}

		dmc, err := conn.Ucmdb.UpdateConfigurationItem(id, dic)
		utils.LogMe("DEBUG", "resourceCiUpdate|UpdateConfigurationItem()", dmc)
		if err != nil {
			utils.LogMe("ERROR", "resourceCiUpdate|UpdateConfigurationItem()", err)
			return diag.FromErr(err)
		}
		d.Set("last_updated", time.Now().Format(time.RFC850))
	}

	return resourceDataModelCiRead(ctx, d, meta)
}

func resourceDataModelDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	conn := meta.(*rest.Client)

	var diags diag.Diagnostics

	id := d.Id()
	dmc, err := conn.Ucmdb.DeleteConfigurationItem(id)
	_ = dmc
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId("")

	return diags
}
